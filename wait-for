#!/usr/bin/env bash

# wait-for is a script designed to synchronize services like docker-compose.
# It can be used to wait for another service to be ready.
# https://github.com/Eficode/wait-for

set -e

TIMEOUT=${TIMEOUT:-15}
QUIET=${QUIET:-0}
PROTOCOL="tcp"

usage() {
  cat << USAGE >&2
Usage:
  $0 host:port [-s] [-t timeout] [-- command args]
  -h HOST | --host=HOST       Host or IP under test
  -p PORT | --port=PORT       TCP port under test
                              Alternatively, you specify the host and port as host:port
  -s | --strict               Only execute subcommand if the test succeeds
  -q | --quiet                Don't output any status messages
  -t TIMEOUT | --timeout=TIMEOUT
                              Timeout in seconds, zero for no timeout
  -v | --verbose              Output verbose messages
  -- COMMAND ARGS             Execute command with args after the test finishes
USAGE
  exit 1
}

wait_for() {
  if [[ "${TIMEOUT}" -gt 0 ]]; then
    echo "Waiting ${TIMEOUT} seconds for ${HOST}:${PORT}"
  else
    echo "Waiting for ${HOST}:${PORT} without a timeout"
  fi
  start_ts=$(date +%s)
  while :
  do
    if [[ "${PROTOCOL}" == "tcp" ]]; then
      if nc -z "${HOST}" "${PORT}" ; then
        end_ts=$(date +%s)
        echo "Connection to ${HOST}:${PORT} succeeded after $((end_ts - start_ts)) seconds"
        break
      fi
    fi
    sleep 1
  done
}

while [[ $# -gt 0 ]]
do
  case "$1" in
    *:* )
    HOST=$(echo $1 | cut -d : -f 1)
    PORT=$(echo $1 | cut -d : -f 2)
    shift 1
    ;;
    -h)
    HOST="$2"
    if [[ ${HOST} == "" ]]; then break; fi
    shift 2
    ;;
    --host=*)
    HOST="${1#*=}"
    shift 1
    ;;
    -p)
    PORT="$2"
    if [[ ${PORT} == "" ]]; then break; fi
    shift 2
    ;;
    --port=*)
    PORT="${1#*=}"
    shift 1
    ;;
    -t)
    TIMEOUT="$2"
    if [[ ${TIMEOUT} == "" ]]; then break; fi
    shift 2
    ;;
    --timeout=*)
    TIMEOUT="${1#*=}"
    shift 1
    ;;
    -q|--quiet)
    QUIET=1
    shift 1
    ;;
    -s|--strict)
    STRICT=1
    shift 1
    ;;
    -v|--verbose)
    VERBOSE=1
    shift 1
    ;;
    --)
    shift
    break
    ;;
    *)
    usage
    ;;
  esac
done

if [[ "${HOST}" == "" || "${PORT}" == "" ]]; then
  echo "Error: you need to provide a host and port to test."
  usage
fi

wait_for

shift $((OPTIND-1))

if [[ $# -gt 0 ]]; then
  exec "$@"
else
  exit 0
fi
